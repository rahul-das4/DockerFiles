USERNAME=jenkins
HOME=/opt/jenkins_home
VOL=jenkins_home
IMAGE=myimagejs:final
CONT=mycontjs
REF_LOC=/usr/share/jenkins/ref
NODEJS_HOME=/opt/nodejs
MAVEN_HOME=/opt/maven
DOL=$


mkdir $HOME
chown 1000:1000 $HOME

#####################################
# Define no of executors in Jenkins master machine
#####################################

cat <<EOF >executors.groovy
import jenkins.model.*
Jenkins.instance.setNumExecutors(4)
EOF

#####################################
# Create casc in Jenkins master machine
#####################################

cat <<EOF >casc.yaml
jenkins:
  securityRealm:
    local:
      allowsSignup: false
      users:
       - id: $DOL{JENKINS_ADMIN_ID}
         password: $DOL{JENKINS_ADMIN_PASSWORD}
       - id: test
         password: test@123		 
  authorizationStrategy:
    projectMatrix:
      permissions:
        - "Overall/Administer:admin"
        - "Overall/Read:authenticated"
        - "Overall/Read:test"
  remotingSecurity:
    enabled: true
security:
  queueItemAuthenticator:
    authenticators:
    - global:
        strategy: triggeringUsersAuthorizationStrategy		
unclassified:
  location:
    url: http://localhost:5000/
EOF

#####################################
# Define plugins in Jenkins master machine
#####################################

cat <<EOF >plugins.txt
authorize-project:latest 
pipeline-maven:3.10.0
ssh
ssh-agent
oauth-credentials
antisamy-markup-formatter:latest
build-timeout:latest
cloudbees-folder:latest
configuration-as-code:latest
credentials-binding:latest
email-ext:latest
git:latest
github-branch-source:latest
mailer:latest
matrix-auth:latest
pam-auth:latest
pipeline-github-lib:latest
pipeline-stage-view:latest
ssh-slaves:latest
timestamper:latest
workflow-aggregator:latest
ws-cleanup:latest
EOF

#####################################
# Download Maven and NodeJs package
#####################################
wget https://dlcdn.apache.org/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz
wget https://nodejs.org/dist/v14.17.6/node-v14.17.6-linux-x64.tar.xz
#####################################

#####################################
# creates DockerFile
#####################################

cat <<EOF >Dockerfile
FROM jenkins/jenkins:lts-jdk11
MAINTAINER Rahul Das
ENV JENKINS_SLAVE_AGENT_PORT=49100
ENV JAVA_OPTS -Djenkins.install.runSetupWizard=false
ENV CASC_JENKINS_CONFIG /var/jenkins_home/init.groovy.d/casc.yaml
ENV HOME /var/jenkins_home
ENV NODEJS_HOME $NODEJS_HOME
ENV MAVEN_HOME $MAVEN_HOME
ENV PATH $NODEJS_HOME/bin:$MAVEN_HOME/bin:$DOL{PATH}
COPY --chown=$USERNAME:$USERNAME plugins.txt $REF_LOC
RUN xargs /usr/local/bin/install-plugins.sh < $REF_LOC/plugins.txt

COPY --chown=$USERNAME:$USERNAME executors.groovy  $REF_LOC/init.groovy.d/executors.groovy
#RUN mkdir $REF_LOC/ssl
#COPY --chown=$USERNAME:$USERNAME rahul.pfx $REF_LOC/ssl
ADD casc.yaml $REF_LOC/init.groovy.d/casc.yaml
USER root
ADD node-v14.17.6-linux-x64.tar.xz /opt/
ADD apache-maven-3.8.2-bin.tar.gz /opt/
RUN mv /opt/node-v14.17.6-linux-x64 /opt/nodejs
RUN mv /opt/apache-maven-3.8.2 /opt/maven
RUN chown -R jenkins:jenkins /opt/nodejs
RUN chown -R jenkins:jenkins /opt/maven
USER jenkins
#ENV JENKINS_OPTS --httpPort=-1 --httpsPort=8081 --httpsKeyStore=$REF_LOC/ssl/rahul.pfx --httpsKeyStorePassword=XXX
EXPOSE 8080
VOLUME $VOL
EOF

docker build --no-cache -t $IMAGE .
docker run -d --name $CONT -p 5000:8080 --env JENKINS_ADMIN_ID=admin --env JENKINS_ADMIN_PASSWORD=admin -v $HOME:/var/jenkins_home $IMAGE

#### Use this if you wish to run Manually #####
#docker run -d --name mycontjs -p 5000:8080 --env JENKINS_ADMIN_ID=admin --env JENKINS_ADMIN_PASSWORD=admin -v $HOME:/var/jenkins_home myimagejs:casc

### Run without bind or volume mount
#docker run -d --name mycontjs -p 5000:8080 --env JENKINS_ADMIN_ID=admin --env JENKINS_ADMIN_PASSWORD=admin myimagejs:<tag> D=admin myimagejs:<tag>

